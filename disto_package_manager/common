#!/bin/sh

########################################################################
# Check the connection by downloading a file from ftp.debian.org. No disk space used.
# Usage: connectiontest [attempts]
# If attempt count is not specified or 0, then it will loop forever and exit(!) your main program with 1 exit status.
connectiontest() {
    TEXT_CHECKING='Checking internet connection...'
    TEXT_FAILED='Internet connection test failed!'
    TEXT_ASK_RETRY='\n\nThis script requires a working internet connection. Please configure your internet connection, then hit "Enter" to continue, else hit "q" to quit.'
    TEXT_ABORT='Script aborted.'
    TEXT_OK='Internet connection test passed!'

    i=0
    attempts=${1:-0}
    while [ "$i" -lt "$attempts" ] || [ "$attempts" -eq 0 ]; do
        say "$TEXT_CHECKING"
        if getURL '2term' 'http://ftp.debian.org/debian/README' >/dev/null;then
            say "$TEXT_OK" 1
            return 0
        fi
        say "$TEXT_FAILED"
        if [ "$i" -eq $((attempts - 1)) ];then # if last attempt
            return 1
        elif prompt "$TEXT_ASK_RETRY" Q;then # if user wants to quit
            say "$TEXT_ABORT" 2
            [ "$attempts" -eq 0 ] && exit 1 || return 1
        fi
        tput clear
        i=$((i + 1))
    done
}

# Usage: say text [delayAfterText|pause]
say() {
    width=$(tput cols 2>/dev/tty)
    echo "$1" | fold -s -w $((width - 3)) | sed 's/^/  /' # wraps text nicely and adds two leading spaces
    if [ "${2}" = 'pause' ];then
        stty -icanon -echo time 0 min 1
		head -c1 >/dev/null
		stty icanon echo
    else
        sleep "${2:-0}"
    fi
}

# Usage: prompt text [ Y | N | Q | <string> ]
prompt() {
    answer=""
    prompt=""
    default=""

    if [ "${2:-}" ] && [ "${2}" = "Q" ];then
        while true; do
            printf "$1 "
        	stty -icanon -echo time 0 min 1
			answer="$(head -c1)"
			stty icanon echo
            echo
            if [ "$answer" = "Q" ] || [ "$answer" = "q" ];then
                return 0
            elif [ -z "$answer" ];then
                return 1
            fi
        done
    fi

    if [ -z "${2:-}" ] || [ "${2}" = "Y" ];then
        prompt='Y/n'
        default='Y'
    elif [ "${2}" = "N" ];then
        prompt='y/N'
        default='N'
    fi

	while true; do
		printf "$1 ${prompt:+[$prompt] }"
		stty -icanon -echo time 0 min 1
		answer="$(head -c1)"
		stty icanon echo
		echo
        	
		case "$answer" in
			[Yy]) echo; return 0 ;;
			[Nn]) echo; return 1 ;;
			[Qq]) echo; return 1 ;;
			*) printf "invalid response only y[yes] or n[No] are allowed.";;
		esac
	done
}

keep_superuser() {
    while true; do
        my-superuser true
        sleep 600
    done
}

end_superuser() {
    if command -v doas >/dev/null 2>&1;then
        doas -L
    fi
}

Distrobox_Package_update_() {
    distrobox enter --name "gaming" -- "yay -q --noprogressbar -Syy --noconfirm" || exit 1
}

Distrobox_package_installer_() {
    distrobox enter --name "gaming" -- "yay -q --noprogressbar -Syu $@ --noconfirm" || exit 1
}

failed_to_run() {
    __message_="${1:-}"
    echo "$__message_"
    stty -icanon -echo time 0 min 1
	head -c1 >/dev/null
	stty icanon echo
    exit 1
}

flatpak_install() {
    __icons_="${1:-}"
    __flatpak_="${2:-}"
    __repo_="${3:-}"
    if [ -z "$__repo_" ];then
    	flathub="flathub"
    elif [ "$__repo_" = "nonflathub" ];then
    	flathub=""
    fi
    
    my-superuser flatpak install -y --noninteractive $flathub "${__flatpak_}"
    if [ -f "/usr/share/my_stuff/appearance_applications/${__icons_}.desktop" ];then
    	my-superuser ln -sf "/usr/share/my_stuff/appearance_applications/${__icons_}.desktop" "/usr/share/applications"
    else
    	my-superuser tee "/usr/share/my_stuff/system_files/applications/${__icons_}.desktop" <<- EOF >/dev/null 2>&1
    	[Desktop Entry]
		Name=${__icons_}
		Comment=${__icons_}
		Exec=flatpak run ${__flatpak_}
		Terminal=false
		Type=Application
		Icon=flatpak
		Categories=GTK;
		MimeType=text/html;text/xml;application/xhtml_xml;
		StartupNotify=true
		EOF
    	my-superuser ln -sf "/usr/share/my_stuff/system_files/applications/${__icons_}.desktop" "/usr/share/applications"
    fi
}

copy_from_extra_skel() {
    __copythis="${1:-}"
    __basename=$(basename "$__copythis")
    __dirname=$(dirname "$__copythis")
    __copythere=""

    if [ "$__dirname" != "." ];then
        __copythere="$__dirname"
    fi

    my-superuser cp -r "/usr/share/my_stuff/extra_skel/${__copythis}" "/usr/share/my_stuff/system_files/skel/${__copythere}"

    for d in /home/*/; do
        [ "$(dirname "$d")" = "/home" ] && ! id "$(basename "$d")" >/dev/null 2>&1 && continue
        user_and_group=$(stat "$(dirname "$d/.config")" -c %u:%g)
        my-superuser cp -r "/usr/share/my_stuff/system_files/skel/${__copythis}" "$d/${__copythis}"
        my-superuser chown -R "$user_and_group" "$d"
    done
}

if command -v git >/dev/null 2>&1;then
    clone_repo() {
        getthis="${1:-}"
        getto="${2:-}"
        echo "git clone ${getthis}"
        git clone --depth=1 "${getthis}" "${getto}"
    }
    super_clone_repo() {
        getthis="${1:-}"
        getto="${2:-}"
        echo "git clone ${getthis}"
        my-superuser git clone --depth=1 "${getthis}" "${getto}"
    }
elif command -v svn >/dev/null 2>&1;then
    clone_repo() {
        getthis="${1:-}"
        getto="${2:-}"
        echo "svn clone ${getthis}"
        svn clone --depth=1 "${getthis}" "${getto}"
    }
    super_clone_repo() {
        getthis="${1:-}"
        getto="${2:-}"
        echo "svn clone ${getthis}"
        my-superuser svn clone --depth=1 "${getthis}" "${getto}"
    }
fi

__dpkg_configure() {
    my-superuser dpkg --configure -a
}


my_installer_ln_script() {
	script_name="${1}"
	my-superuser mkdir -p /usr/share/my_stuff/system_files/updater
	my-superuser mkdir -p /usr/share/my_stuff/system_files/downloaded
	my-superuser ln -sf "/usr/share/my_stuff/bin/my_installer/script_to_ln/${script_name}" "/usr/share/my_stuff/system_files/updater"
	"/usr/share/my_stuff/system_files/updater/${script_name}" 
}
